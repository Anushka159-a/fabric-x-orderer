// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	protos "github.ibm.com/decentralized-trust-research/arma/node/protos/comm"
	"context"
	"sync"

	"google.golang.org/grpc"
)

type FakeRequestTransmitClient struct {
	SubmitStub        func(context.Context, *protos.Request, ...grpc.CallOption) (*protos.SubmitResponse, error)
	submitMutex       sync.RWMutex
	submitArgsForCall []struct {
		arg1 context.Context
		arg2 *protos.Request
		arg3 []grpc.CallOption
	}
	submitReturns struct {
		result1 *protos.SubmitResponse
		result2 error
	}
	submitReturnsOnCall map[int]struct {
		result1 *protos.SubmitResponse
		result2 error
	}
	SubmitStreamStub        func(context.Context, ...grpc.CallOption) (protos.RequestTransmit_SubmitStreamClient, error)
	submitStreamMutex       sync.RWMutex
	submitStreamArgsForCall []struct {
		arg1 context.Context
		arg2 []grpc.CallOption
	}
	submitStreamReturns struct {
		result1 protos.RequestTransmit_SubmitStreamClient
		result2 error
	}
	submitStreamReturnsOnCall map[int]struct {
		result1 protos.RequestTransmit_SubmitStreamClient
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestTransmitClient) Submit(arg1 context.Context, arg2 *protos.Request, arg3 ...grpc.CallOption) (*protos.SubmitResponse, error) {
	fake.submitMutex.Lock()
	ret, specificReturn := fake.submitReturnsOnCall[len(fake.submitArgsForCall)]
	fake.submitArgsForCall = append(fake.submitArgsForCall, struct {
		arg1 context.Context
		arg2 *protos.Request
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("Submit", []interface{}{arg1, arg2, arg3})
	fake.submitMutex.Unlock()
	if fake.SubmitStub != nil {
		return fake.SubmitStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRequestTransmitClient) SubmitCallCount() int {
	fake.submitMutex.RLock()
	defer fake.submitMutex.RUnlock()
	return len(fake.submitArgsForCall)
}

func (fake *FakeRequestTransmitClient) SubmitCalls(stub func(context.Context, *protos.Request, ...grpc.CallOption) (*protos.SubmitResponse, error)) {
	fake.submitMutex.Lock()
	defer fake.submitMutex.Unlock()
	fake.SubmitStub = stub
}

func (fake *FakeRequestTransmitClient) SubmitArgsForCall(i int) (context.Context, *protos.Request, []grpc.CallOption) {
	fake.submitMutex.RLock()
	defer fake.submitMutex.RUnlock()
	argsForCall := fake.submitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRequestTransmitClient) SubmitReturns(result1 *protos.SubmitResponse, result2 error) {
	fake.submitMutex.Lock()
	defer fake.submitMutex.Unlock()
	fake.SubmitStub = nil
	fake.submitReturns = struct {
		result1 *protos.SubmitResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRequestTransmitClient) SubmitReturnsOnCall(i int, result1 *protos.SubmitResponse, result2 error) {
	fake.submitMutex.Lock()
	defer fake.submitMutex.Unlock()
	fake.SubmitStub = nil
	if fake.submitReturnsOnCall == nil {
		fake.submitReturnsOnCall = make(map[int]struct {
			result1 *protos.SubmitResponse
			result2 error
		})
	}
	fake.submitReturnsOnCall[i] = struct {
		result1 *protos.SubmitResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRequestTransmitClient) SubmitStream(arg1 context.Context, arg2 ...grpc.CallOption) (protos.RequestTransmit_SubmitStreamClient, error) {
	fake.submitStreamMutex.Lock()
	ret, specificReturn := fake.submitStreamReturnsOnCall[len(fake.submitStreamArgsForCall)]
	fake.submitStreamArgsForCall = append(fake.submitStreamArgsForCall, struct {
		arg1 context.Context
		arg2 []grpc.CallOption
	}{arg1, arg2})
	fake.recordInvocation("SubmitStream", []interface{}{arg1, arg2})
	fake.submitStreamMutex.Unlock()
	if fake.SubmitStreamStub != nil {
		return fake.SubmitStreamStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitStreamReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRequestTransmitClient) SubmitStreamCallCount() int {
	fake.submitStreamMutex.RLock()
	defer fake.submitStreamMutex.RUnlock()
	return len(fake.submitStreamArgsForCall)
}

func (fake *FakeRequestTransmitClient) SubmitStreamCalls(stub func(context.Context, ...grpc.CallOption) (protos.RequestTransmit_SubmitStreamClient, error)) {
	fake.submitStreamMutex.Lock()
	defer fake.submitStreamMutex.Unlock()
	fake.SubmitStreamStub = stub
}

func (fake *FakeRequestTransmitClient) SubmitStreamArgsForCall(i int) (context.Context, []grpc.CallOption) {
	fake.submitStreamMutex.RLock()
	defer fake.submitStreamMutex.RUnlock()
	argsForCall := fake.submitStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRequestTransmitClient) SubmitStreamReturns(result1 protos.RequestTransmit_SubmitStreamClient, result2 error) {
	fake.submitStreamMutex.Lock()
	defer fake.submitStreamMutex.Unlock()
	fake.SubmitStreamStub = nil
	fake.submitStreamReturns = struct {
		result1 protos.RequestTransmit_SubmitStreamClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRequestTransmitClient) SubmitStreamReturnsOnCall(i int, result1 protos.RequestTransmit_SubmitStreamClient, result2 error) {
	fake.submitStreamMutex.Lock()
	defer fake.submitStreamMutex.Unlock()
	fake.SubmitStreamStub = nil
	if fake.submitStreamReturnsOnCall == nil {
		fake.submitStreamReturnsOnCall = make(map[int]struct {
			result1 protos.RequestTransmit_SubmitStreamClient
			result2 error
		})
	}
	fake.submitStreamReturnsOnCall[i] = struct {
		result1 protos.RequestTransmit_SubmitStreamClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRequestTransmitClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.submitMutex.RLock()
	defer fake.submitMutex.RUnlock()
	fake.submitStreamMutex.RLock()
	defer fake.submitStreamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRequestTransmitClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protos.RequestTransmitClient = new(FakeRequestTransmitClient)
