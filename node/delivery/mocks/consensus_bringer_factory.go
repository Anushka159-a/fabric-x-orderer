// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/types"
	"github.com/hyperledger/fabric-x-orderer/node/config"
	"github.com/hyperledger/fabric-x-orderer/node/delivery"
	"github.com/hyperledger/fabric-x-orderer/node/ledger"
)

type FakeConsensusBringerFactory struct {
	CreateStub        func([]config.RawBytes, config.RawBytes, config.RawBytes, string, ledger.AssemblerLedgerReaderWriter, types.Logger) delivery.ConsensusBringer
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 []config.RawBytes
		arg2 config.RawBytes
		arg3 config.RawBytes
		arg4 string
		arg5 ledger.AssemblerLedgerReaderWriter
		arg6 types.Logger
	}
	createReturns struct {
		result1 delivery.ConsensusBringer
	}
	createReturnsOnCall map[int]struct {
		result1 delivery.ConsensusBringer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConsensusBringerFactory) Create(arg1 []config.RawBytes, arg2 config.RawBytes, arg3 config.RawBytes, arg4 string, arg5 ledger.AssemblerLedgerReaderWriter, arg6 types.Logger) delivery.ConsensusBringer {
	var arg1Copy []config.RawBytes
	if arg1 != nil {
		arg1Copy = make([]config.RawBytes, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 []config.RawBytes
		arg2 config.RawBytes
		arg3 config.RawBytes
		arg4 string
		arg5 ledger.AssemblerLedgerReaderWriter
		arg6 types.Logger
	}{arg1Copy, arg2, arg3, arg4, arg5, arg6})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1Copy, arg2, arg3, arg4, arg5, arg6})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConsensusBringerFactory) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeConsensusBringerFactory) CreateCalls(stub func([]config.RawBytes, config.RawBytes, config.RawBytes, string, ledger.AssemblerLedgerReaderWriter, types.Logger) delivery.ConsensusBringer) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeConsensusBringerFactory) CreateArgsForCall(i int) ([]config.RawBytes, config.RawBytes, config.RawBytes, string, ledger.AssemblerLedgerReaderWriter, types.Logger) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeConsensusBringerFactory) CreateReturns(result1 delivery.ConsensusBringer) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 delivery.ConsensusBringer
	}{result1}
}

func (fake *FakeConsensusBringerFactory) CreateReturnsOnCall(i int, result1 delivery.ConsensusBringer) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 delivery.ConsensusBringer
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 delivery.ConsensusBringer
	}{result1}
}

func (fake *FakeConsensusBringerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConsensusBringerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ delivery.ConsensusBringerFactory = new(FakeConsensusBringerFactory)
