// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"github.ibm.com/decentralized-trust-research/arma/core"
	"github.ibm.com/decentralized-trust-research/arma/node/delivery"
	"sync"
)

type FakeConsensusBringer struct {
	ReplicateStub        func(core.AssemblerConsensusPosition) <-chan core.OrderedBatchAttestation
	replicateMutex       sync.RWMutex
	replicateArgsForCall []struct {
		arg1 core.AssemblerConsensusPosition
	}
	replicateReturns struct {
		result1 <-chan core.OrderedBatchAttestation
	}
	replicateReturnsOnCall map[int]struct {
		result1 <-chan core.OrderedBatchAttestation
	}
	ReplicateStateStub        func() <-chan *core.State
	replicateStateMutex       sync.RWMutex
	replicateStateArgsForCall []struct {
	}
	replicateStateReturns struct {
		result1 <-chan *core.State
	}
	replicateStateReturnsOnCall map[int]struct {
		result1 <-chan *core.State
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConsensusBringer) Replicate(arg1 core.AssemblerConsensusPosition) <-chan core.OrderedBatchAttestation {
	fake.replicateMutex.Lock()
	ret, specificReturn := fake.replicateReturnsOnCall[len(fake.replicateArgsForCall)]
	fake.replicateArgsForCall = append(fake.replicateArgsForCall, struct {
		arg1 core.AssemblerConsensusPosition
	}{arg1})
	fake.recordInvocation("Replicate", []interface{}{arg1})
	fake.replicateMutex.Unlock()
	if fake.ReplicateStub != nil {
		return fake.ReplicateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.replicateReturns
	return fakeReturns.result1
}

func (fake *FakeConsensusBringer) ReplicateCallCount() int {
	fake.replicateMutex.RLock()
	defer fake.replicateMutex.RUnlock()
	return len(fake.replicateArgsForCall)
}

func (fake *FakeConsensusBringer) ReplicateCalls(stub func(core.AssemblerConsensusPosition) <-chan core.OrderedBatchAttestation) {
	fake.replicateMutex.Lock()
	defer fake.replicateMutex.Unlock()
	fake.ReplicateStub = stub
}

func (fake *FakeConsensusBringer) ReplicateArgsForCall(i int) core.AssemblerConsensusPosition {
	fake.replicateMutex.RLock()
	defer fake.replicateMutex.RUnlock()
	argsForCall := fake.replicateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConsensusBringer) ReplicateReturns(result1 <-chan core.OrderedBatchAttestation) {
	fake.replicateMutex.Lock()
	defer fake.replicateMutex.Unlock()
	fake.ReplicateStub = nil
	fake.replicateReturns = struct {
		result1 <-chan core.OrderedBatchAttestation
	}{result1}
}

func (fake *FakeConsensusBringer) ReplicateReturnsOnCall(i int, result1 <-chan core.OrderedBatchAttestation) {
	fake.replicateMutex.Lock()
	defer fake.replicateMutex.Unlock()
	fake.ReplicateStub = nil
	if fake.replicateReturnsOnCall == nil {
		fake.replicateReturnsOnCall = make(map[int]struct {
			result1 <-chan core.OrderedBatchAttestation
		})
	}
	fake.replicateReturnsOnCall[i] = struct {
		result1 <-chan core.OrderedBatchAttestation
	}{result1}
}

func (fake *FakeConsensusBringer) ReplicateState() <-chan *core.State {
	fake.replicateStateMutex.Lock()
	ret, specificReturn := fake.replicateStateReturnsOnCall[len(fake.replicateStateArgsForCall)]
	fake.replicateStateArgsForCall = append(fake.replicateStateArgsForCall, struct {
	}{})
	fake.recordInvocation("ReplicateState", []interface{}{})
	fake.replicateStateMutex.Unlock()
	if fake.ReplicateStateStub != nil {
		return fake.ReplicateStateStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.replicateStateReturns
	return fakeReturns.result1
}

func (fake *FakeConsensusBringer) ReplicateStateCallCount() int {
	fake.replicateStateMutex.RLock()
	defer fake.replicateStateMutex.RUnlock()
	return len(fake.replicateStateArgsForCall)
}

func (fake *FakeConsensusBringer) ReplicateStateCalls(stub func() <-chan *core.State) {
	fake.replicateStateMutex.Lock()
	defer fake.replicateStateMutex.Unlock()
	fake.ReplicateStateStub = stub
}

func (fake *FakeConsensusBringer) ReplicateStateReturns(result1 <-chan *core.State) {
	fake.replicateStateMutex.Lock()
	defer fake.replicateStateMutex.Unlock()
	fake.ReplicateStateStub = nil
	fake.replicateStateReturns = struct {
		result1 <-chan *core.State
	}{result1}
}

func (fake *FakeConsensusBringer) ReplicateStateReturnsOnCall(i int, result1 <-chan *core.State) {
	fake.replicateStateMutex.Lock()
	defer fake.replicateStateMutex.Unlock()
	fake.ReplicateStateStub = nil
	if fake.replicateStateReturnsOnCall == nil {
		fake.replicateStateReturnsOnCall = make(map[int]struct {
			result1 <-chan *core.State
		})
	}
	fake.replicateStateReturnsOnCall[i] = struct {
		result1 <-chan *core.State
	}{result1}
}

func (fake *FakeConsensusBringer) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakeConsensusBringer) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeConsensusBringer) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeConsensusBringer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.replicateMutex.RLock()
	defer fake.replicateMutex.RUnlock()
	fake.replicateStateMutex.RLock()
	defer fake.replicateStateMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConsensusBringer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ delivery.ConsensusBringer = new(FakeConsensusBringer)
