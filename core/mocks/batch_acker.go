// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.ibm.com/decentralized-trust-research/arma/common/types"
	"github.ibm.com/decentralized-trust-research/arma/core"
)

type FakeBatchAcker struct {
	AckStub        func(types.BatchSequence, types.PartyID)
	ackMutex       sync.RWMutex
	ackArgsForCall []struct {
		arg1 types.BatchSequence
		arg2 types.PartyID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBatchAcker) Ack(arg1 types.BatchSequence, arg2 types.PartyID) {
	fake.ackMutex.Lock()
	fake.ackArgsForCall = append(fake.ackArgsForCall, struct {
		arg1 types.BatchSequence
		arg2 types.PartyID
	}{arg1, arg2})
	stub := fake.AckStub
	fake.recordInvocation("Ack", []interface{}{arg1, arg2})
	fake.ackMutex.Unlock()
	if stub != nil {
		fake.AckStub(arg1, arg2)
	}
}

func (fake *FakeBatchAcker) AckCallCount() int {
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	return len(fake.ackArgsForCall)
}

func (fake *FakeBatchAcker) AckCalls(stub func(types.BatchSequence, types.PartyID)) {
	fake.ackMutex.Lock()
	defer fake.ackMutex.Unlock()
	fake.AckStub = stub
}

func (fake *FakeBatchAcker) AckArgsForCall(i int) (types.BatchSequence, types.PartyID) {
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	argsForCall := fake.ackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBatchAcker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBatchAcker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.BatchAcker = new(FakeBatchAcker)
