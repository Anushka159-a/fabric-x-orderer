// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	arma "arma/core"
	"sync"
)

type FakeBatch struct {
	DigestStub        func() []byte
	digestMutex       sync.RWMutex
	digestArgsForCall []struct {
	}
	digestReturns struct {
		result1 []byte
	}
	digestReturnsOnCall map[int]struct {
		result1 []byte
	}
	PartyStub        func() arma.PartyID
	partyMutex       sync.RWMutex
	partyArgsForCall []struct {
	}
	partyReturns struct {
		result1 arma.PartyID
	}
	partyReturnsOnCall map[int]struct {
		result1 arma.PartyID
	}
	RequestsStub        func() arma.BatchedRequests
	requestsMutex       sync.RWMutex
	requestsArgsForCall []struct {
	}
	requestsReturns struct {
		result1 arma.BatchedRequests
	}
	requestsReturnsOnCall map[int]struct {
		result1 arma.BatchedRequests
	}
	SeqStub        func() uint64
	seqMutex       sync.RWMutex
	seqArgsForCall []struct {
	}
	seqReturns struct {
		result1 uint64
	}
	seqReturnsOnCall map[int]struct {
		result1 uint64
	}
	ShardStub        func() arma.ShardID
	shardMutex       sync.RWMutex
	shardArgsForCall []struct {
	}
	shardReturns struct {
		result1 arma.ShardID
	}
	shardReturnsOnCall map[int]struct {
		result1 arma.ShardID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBatch) Digest() []byte {
	fake.digestMutex.Lock()
	ret, specificReturn := fake.digestReturnsOnCall[len(fake.digestArgsForCall)]
	fake.digestArgsForCall = append(fake.digestArgsForCall, struct {
	}{})
	stub := fake.DigestStub
	fakeReturns := fake.digestReturns
	fake.recordInvocation("Digest", []interface{}{})
	fake.digestMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatch) DigestCallCount() int {
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	return len(fake.digestArgsForCall)
}

func (fake *FakeBatch) DigestCalls(stub func() []byte) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = stub
}

func (fake *FakeBatch) DigestReturns(result1 []byte) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = nil
	fake.digestReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeBatch) DigestReturnsOnCall(i int, result1 []byte) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = nil
	if fake.digestReturnsOnCall == nil {
		fake.digestReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.digestReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeBatch) Party() arma.PartyID {
	fake.partyMutex.Lock()
	ret, specificReturn := fake.partyReturnsOnCall[len(fake.partyArgsForCall)]
	fake.partyArgsForCall = append(fake.partyArgsForCall, struct {
	}{})
	stub := fake.PartyStub
	fakeReturns := fake.partyReturns
	fake.recordInvocation("Party", []interface{}{})
	fake.partyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatch) PartyCallCount() int {
	fake.partyMutex.RLock()
	defer fake.partyMutex.RUnlock()
	return len(fake.partyArgsForCall)
}

func (fake *FakeBatch) PartyCalls(stub func() arma.PartyID) {
	fake.partyMutex.Lock()
	defer fake.partyMutex.Unlock()
	fake.PartyStub = stub
}

func (fake *FakeBatch) PartyReturns(result1 arma.PartyID) {
	fake.partyMutex.Lock()
	defer fake.partyMutex.Unlock()
	fake.PartyStub = nil
	fake.partyReturns = struct {
		result1 arma.PartyID
	}{result1}
}

func (fake *FakeBatch) PartyReturnsOnCall(i int, result1 arma.PartyID) {
	fake.partyMutex.Lock()
	defer fake.partyMutex.Unlock()
	fake.PartyStub = nil
	if fake.partyReturnsOnCall == nil {
		fake.partyReturnsOnCall = make(map[int]struct {
			result1 arma.PartyID
		})
	}
	fake.partyReturnsOnCall[i] = struct {
		result1 arma.PartyID
	}{result1}
}

func (fake *FakeBatch) Requests() arma.BatchedRequests {
	fake.requestsMutex.Lock()
	ret, specificReturn := fake.requestsReturnsOnCall[len(fake.requestsArgsForCall)]
	fake.requestsArgsForCall = append(fake.requestsArgsForCall, struct {
	}{})
	stub := fake.RequestsStub
	fakeReturns := fake.requestsReturns
	fake.recordInvocation("Requests", []interface{}{})
	fake.requestsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatch) RequestsCallCount() int {
	fake.requestsMutex.RLock()
	defer fake.requestsMutex.RUnlock()
	return len(fake.requestsArgsForCall)
}

func (fake *FakeBatch) RequestsCalls(stub func() arma.BatchedRequests) {
	fake.requestsMutex.Lock()
	defer fake.requestsMutex.Unlock()
	fake.RequestsStub = stub
}

func (fake *FakeBatch) RequestsReturns(result1 arma.BatchedRequests) {
	fake.requestsMutex.Lock()
	defer fake.requestsMutex.Unlock()
	fake.RequestsStub = nil
	fake.requestsReturns = struct {
		result1 arma.BatchedRequests
	}{result1}
}

func (fake *FakeBatch) RequestsReturnsOnCall(i int, result1 arma.BatchedRequests) {
	fake.requestsMutex.Lock()
	defer fake.requestsMutex.Unlock()
	fake.RequestsStub = nil
	if fake.requestsReturnsOnCall == nil {
		fake.requestsReturnsOnCall = make(map[int]struct {
			result1 arma.BatchedRequests
		})
	}
	fake.requestsReturnsOnCall[i] = struct {
		result1 arma.BatchedRequests
	}{result1}
}

func (fake *FakeBatch) Seq() uint64 {
	fake.seqMutex.Lock()
	ret, specificReturn := fake.seqReturnsOnCall[len(fake.seqArgsForCall)]
	fake.seqArgsForCall = append(fake.seqArgsForCall, struct {
	}{})
	stub := fake.SeqStub
	fakeReturns := fake.seqReturns
	fake.recordInvocation("Seq", []interface{}{})
	fake.seqMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatch) SeqCallCount() int {
	fake.seqMutex.RLock()
	defer fake.seqMutex.RUnlock()
	return len(fake.seqArgsForCall)
}

func (fake *FakeBatch) SeqCalls(stub func() uint64) {
	fake.seqMutex.Lock()
	defer fake.seqMutex.Unlock()
	fake.SeqStub = stub
}

func (fake *FakeBatch) SeqReturns(result1 uint64) {
	fake.seqMutex.Lock()
	defer fake.seqMutex.Unlock()
	fake.SeqStub = nil
	fake.seqReturns = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeBatch) SeqReturnsOnCall(i int, result1 uint64) {
	fake.seqMutex.Lock()
	defer fake.seqMutex.Unlock()
	fake.SeqStub = nil
	if fake.seqReturnsOnCall == nil {
		fake.seqReturnsOnCall = make(map[int]struct {
			result1 uint64
		})
	}
	fake.seqReturnsOnCall[i] = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeBatch) Shard() arma.ShardID {
	fake.shardMutex.Lock()
	ret, specificReturn := fake.shardReturnsOnCall[len(fake.shardArgsForCall)]
	fake.shardArgsForCall = append(fake.shardArgsForCall, struct {
	}{})
	stub := fake.ShardStub
	fakeReturns := fake.shardReturns
	fake.recordInvocation("Shard", []interface{}{})
	fake.shardMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatch) ShardCallCount() int {
	fake.shardMutex.RLock()
	defer fake.shardMutex.RUnlock()
	return len(fake.shardArgsForCall)
}

func (fake *FakeBatch) ShardCalls(stub func() arma.ShardID) {
	fake.shardMutex.Lock()
	defer fake.shardMutex.Unlock()
	fake.ShardStub = stub
}

func (fake *FakeBatch) ShardReturns(result1 arma.ShardID) {
	fake.shardMutex.Lock()
	defer fake.shardMutex.Unlock()
	fake.ShardStub = nil
	fake.shardReturns = struct {
		result1 arma.ShardID
	}{result1}
}

func (fake *FakeBatch) ShardReturnsOnCall(i int, result1 arma.ShardID) {
	fake.shardMutex.Lock()
	defer fake.shardMutex.Unlock()
	fake.ShardStub = nil
	if fake.shardReturnsOnCall == nil {
		fake.shardReturnsOnCall = make(map[int]struct {
			result1 arma.ShardID
		})
	}
	fake.shardReturnsOnCall[i] = struct {
		result1 arma.ShardID
	}{result1}
}

func (fake *FakeBatch) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	fake.partyMutex.RLock()
	defer fake.partyMutex.RUnlock()
	fake.requestsMutex.RLock()
	defer fake.requestsMutex.RUnlock()
	fake.seqMutex.RLock()
	defer fake.seqMutex.RUnlock()
	fake.shardMutex.RLock()
	defer fake.shardMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBatch) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ arma.Batch = new(FakeBatch)
