// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"arma/core"
	"sync"
)

type FakeBatchAttestation struct {
	DeserializeStub        func([]byte) error
	deserializeMutex       sync.RWMutex
	deserializeArgsForCall []struct {
		arg1 []byte
	}
	deserializeReturns struct {
		result1 error
	}
	deserializeReturnsOnCall map[int]struct {
		result1 error
	}
	DigestStub        func() []byte
	digestMutex       sync.RWMutex
	digestArgsForCall []struct {
	}
	digestReturns struct {
		result1 []byte
	}
	digestReturnsOnCall map[int]struct {
		result1 []byte
	}
	FragmentsStub        func() []core.BatchAttestationFragment
	fragmentsMutex       sync.RWMutex
	fragmentsArgsForCall []struct {
	}
	fragmentsReturns struct {
		result1 []core.BatchAttestationFragment
	}
	fragmentsReturnsOnCall map[int]struct {
		result1 []core.BatchAttestationFragment
	}
	PrimaryStub        func() core.PartyID
	primaryMutex       sync.RWMutex
	primaryArgsForCall []struct {
	}
	primaryReturns struct {
		result1 core.PartyID
	}
	primaryReturnsOnCall map[int]struct {
		result1 core.PartyID
	}
	SeqStub        func() core.BatchSequence
	seqMutex       sync.RWMutex
	seqArgsForCall []struct {
	}
	seqReturns struct {
		result1 core.BatchSequence
	}
	seqReturnsOnCall map[int]struct {
		result1 core.BatchSequence
	}
	SerializeStub        func() []byte
	serializeMutex       sync.RWMutex
	serializeArgsForCall []struct {
	}
	serializeReturns struct {
		result1 []byte
	}
	serializeReturnsOnCall map[int]struct {
		result1 []byte
	}
	ShardStub        func() core.ShardID
	shardMutex       sync.RWMutex
	shardArgsForCall []struct {
	}
	shardReturns struct {
		result1 core.ShardID
	}
	shardReturnsOnCall map[int]struct {
		result1 core.ShardID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBatchAttestation) Deserialize(arg1 []byte) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deserializeMutex.Lock()
	ret, specificReturn := fake.deserializeReturnsOnCall[len(fake.deserializeArgsForCall)]
	fake.deserializeArgsForCall = append(fake.deserializeArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Deserialize", []interface{}{arg1Copy})
	fake.deserializeMutex.Unlock()
	if fake.DeserializeStub != nil {
		return fake.DeserializeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deserializeReturns
	return fakeReturns.result1
}

func (fake *FakeBatchAttestation) DeserializeCallCount() int {
	fake.deserializeMutex.RLock()
	defer fake.deserializeMutex.RUnlock()
	return len(fake.deserializeArgsForCall)
}

func (fake *FakeBatchAttestation) DeserializeCalls(stub func([]byte) error) {
	fake.deserializeMutex.Lock()
	defer fake.deserializeMutex.Unlock()
	fake.DeserializeStub = stub
}

func (fake *FakeBatchAttestation) DeserializeArgsForCall(i int) []byte {
	fake.deserializeMutex.RLock()
	defer fake.deserializeMutex.RUnlock()
	argsForCall := fake.deserializeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBatchAttestation) DeserializeReturns(result1 error) {
	fake.deserializeMutex.Lock()
	defer fake.deserializeMutex.Unlock()
	fake.DeserializeStub = nil
	fake.deserializeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatchAttestation) DeserializeReturnsOnCall(i int, result1 error) {
	fake.deserializeMutex.Lock()
	defer fake.deserializeMutex.Unlock()
	fake.DeserializeStub = nil
	if fake.deserializeReturnsOnCall == nil {
		fake.deserializeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deserializeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBatchAttestation) Digest() []byte {
	fake.digestMutex.Lock()
	ret, specificReturn := fake.digestReturnsOnCall[len(fake.digestArgsForCall)]
	fake.digestArgsForCall = append(fake.digestArgsForCall, struct {
	}{})
	fake.recordInvocation("Digest", []interface{}{})
	fake.digestMutex.Unlock()
	if fake.DigestStub != nil {
		return fake.DigestStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.digestReturns
	return fakeReturns.result1
}

func (fake *FakeBatchAttestation) DigestCallCount() int {
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	return len(fake.digestArgsForCall)
}

func (fake *FakeBatchAttestation) DigestCalls(stub func() []byte) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = stub
}

func (fake *FakeBatchAttestation) DigestReturns(result1 []byte) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = nil
	fake.digestReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeBatchAttestation) DigestReturnsOnCall(i int, result1 []byte) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = nil
	if fake.digestReturnsOnCall == nil {
		fake.digestReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.digestReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeBatchAttestation) Fragments() []core.BatchAttestationFragment {
	fake.fragmentsMutex.Lock()
	ret, specificReturn := fake.fragmentsReturnsOnCall[len(fake.fragmentsArgsForCall)]
	fake.fragmentsArgsForCall = append(fake.fragmentsArgsForCall, struct {
	}{})
	fake.recordInvocation("Fragments", []interface{}{})
	fake.fragmentsMutex.Unlock()
	if fake.FragmentsStub != nil {
		return fake.FragmentsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.fragmentsReturns
	return fakeReturns.result1
}

func (fake *FakeBatchAttestation) FragmentsCallCount() int {
	fake.fragmentsMutex.RLock()
	defer fake.fragmentsMutex.RUnlock()
	return len(fake.fragmentsArgsForCall)
}

func (fake *FakeBatchAttestation) FragmentsCalls(stub func() []core.BatchAttestationFragment) {
	fake.fragmentsMutex.Lock()
	defer fake.fragmentsMutex.Unlock()
	fake.FragmentsStub = stub
}

func (fake *FakeBatchAttestation) FragmentsReturns(result1 []core.BatchAttestationFragment) {
	fake.fragmentsMutex.Lock()
	defer fake.fragmentsMutex.Unlock()
	fake.FragmentsStub = nil
	fake.fragmentsReturns = struct {
		result1 []core.BatchAttestationFragment
	}{result1}
}

func (fake *FakeBatchAttestation) FragmentsReturnsOnCall(i int, result1 []core.BatchAttestationFragment) {
	fake.fragmentsMutex.Lock()
	defer fake.fragmentsMutex.Unlock()
	fake.FragmentsStub = nil
	if fake.fragmentsReturnsOnCall == nil {
		fake.fragmentsReturnsOnCall = make(map[int]struct {
			result1 []core.BatchAttestationFragment
		})
	}
	fake.fragmentsReturnsOnCall[i] = struct {
		result1 []core.BatchAttestationFragment
	}{result1}
}

func (fake *FakeBatchAttestation) Primary() core.PartyID {
	fake.primaryMutex.Lock()
	ret, specificReturn := fake.primaryReturnsOnCall[len(fake.primaryArgsForCall)]
	fake.primaryArgsForCall = append(fake.primaryArgsForCall, struct {
	}{})
	fake.recordInvocation("Primary", []interface{}{})
	fake.primaryMutex.Unlock()
	if fake.PrimaryStub != nil {
		return fake.PrimaryStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.primaryReturns
	return fakeReturns.result1
}

func (fake *FakeBatchAttestation) PrimaryCallCount() int {
	fake.primaryMutex.RLock()
	defer fake.primaryMutex.RUnlock()
	return len(fake.primaryArgsForCall)
}

func (fake *FakeBatchAttestation) PrimaryCalls(stub func() core.PartyID) {
	fake.primaryMutex.Lock()
	defer fake.primaryMutex.Unlock()
	fake.PrimaryStub = stub
}

func (fake *FakeBatchAttestation) PrimaryReturns(result1 core.PartyID) {
	fake.primaryMutex.Lock()
	defer fake.primaryMutex.Unlock()
	fake.PrimaryStub = nil
	fake.primaryReturns = struct {
		result1 core.PartyID
	}{result1}
}

func (fake *FakeBatchAttestation) PrimaryReturnsOnCall(i int, result1 core.PartyID) {
	fake.primaryMutex.Lock()
	defer fake.primaryMutex.Unlock()
	fake.PrimaryStub = nil
	if fake.primaryReturnsOnCall == nil {
		fake.primaryReturnsOnCall = make(map[int]struct {
			result1 core.PartyID
		})
	}
	fake.primaryReturnsOnCall[i] = struct {
		result1 core.PartyID
	}{result1}
}

func (fake *FakeBatchAttestation) Seq() core.BatchSequence {
	fake.seqMutex.Lock()
	ret, specificReturn := fake.seqReturnsOnCall[len(fake.seqArgsForCall)]
	fake.seqArgsForCall = append(fake.seqArgsForCall, struct {
	}{})
	fake.recordInvocation("Seq", []interface{}{})
	fake.seqMutex.Unlock()
	if fake.SeqStub != nil {
		return fake.SeqStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.seqReturns
	return fakeReturns.result1
}

func (fake *FakeBatchAttestation) SeqCallCount() int {
	fake.seqMutex.RLock()
	defer fake.seqMutex.RUnlock()
	return len(fake.seqArgsForCall)
}

func (fake *FakeBatchAttestation) SeqCalls(stub func() core.BatchSequence) {
	fake.seqMutex.Lock()
	defer fake.seqMutex.Unlock()
	fake.SeqStub = stub
}

func (fake *FakeBatchAttestation) SeqReturns(result1 core.BatchSequence) {
	fake.seqMutex.Lock()
	defer fake.seqMutex.Unlock()
	fake.SeqStub = nil
	fake.seqReturns = struct {
		result1 core.BatchSequence
	}{result1}
}

func (fake *FakeBatchAttestation) SeqReturnsOnCall(i int, result1 core.BatchSequence) {
	fake.seqMutex.Lock()
	defer fake.seqMutex.Unlock()
	fake.SeqStub = nil
	if fake.seqReturnsOnCall == nil {
		fake.seqReturnsOnCall = make(map[int]struct {
			result1 core.BatchSequence
		})
	}
	fake.seqReturnsOnCall[i] = struct {
		result1 core.BatchSequence
	}{result1}
}

func (fake *FakeBatchAttestation) Serialize() []byte {
	fake.serializeMutex.Lock()
	ret, specificReturn := fake.serializeReturnsOnCall[len(fake.serializeArgsForCall)]
	fake.serializeArgsForCall = append(fake.serializeArgsForCall, struct {
	}{})
	fake.recordInvocation("Serialize", []interface{}{})
	fake.serializeMutex.Unlock()
	if fake.SerializeStub != nil {
		return fake.SerializeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.serializeReturns
	return fakeReturns.result1
}

func (fake *FakeBatchAttestation) SerializeCallCount() int {
	fake.serializeMutex.RLock()
	defer fake.serializeMutex.RUnlock()
	return len(fake.serializeArgsForCall)
}

func (fake *FakeBatchAttestation) SerializeCalls(stub func() []byte) {
	fake.serializeMutex.Lock()
	defer fake.serializeMutex.Unlock()
	fake.SerializeStub = stub
}

func (fake *FakeBatchAttestation) SerializeReturns(result1 []byte) {
	fake.serializeMutex.Lock()
	defer fake.serializeMutex.Unlock()
	fake.SerializeStub = nil
	fake.serializeReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeBatchAttestation) SerializeReturnsOnCall(i int, result1 []byte) {
	fake.serializeMutex.Lock()
	defer fake.serializeMutex.Unlock()
	fake.SerializeStub = nil
	if fake.serializeReturnsOnCall == nil {
		fake.serializeReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.serializeReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeBatchAttestation) Shard() core.ShardID {
	fake.shardMutex.Lock()
	ret, specificReturn := fake.shardReturnsOnCall[len(fake.shardArgsForCall)]
	fake.shardArgsForCall = append(fake.shardArgsForCall, struct {
	}{})
	fake.recordInvocation("Shard", []interface{}{})
	fake.shardMutex.Unlock()
	if fake.ShardStub != nil {
		return fake.ShardStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.shardReturns
	return fakeReturns.result1
}

func (fake *FakeBatchAttestation) ShardCallCount() int {
	fake.shardMutex.RLock()
	defer fake.shardMutex.RUnlock()
	return len(fake.shardArgsForCall)
}

func (fake *FakeBatchAttestation) ShardCalls(stub func() core.ShardID) {
	fake.shardMutex.Lock()
	defer fake.shardMutex.Unlock()
	fake.ShardStub = stub
}

func (fake *FakeBatchAttestation) ShardReturns(result1 core.ShardID) {
	fake.shardMutex.Lock()
	defer fake.shardMutex.Unlock()
	fake.ShardStub = nil
	fake.shardReturns = struct {
		result1 core.ShardID
	}{result1}
}

func (fake *FakeBatchAttestation) ShardReturnsOnCall(i int, result1 core.ShardID) {
	fake.shardMutex.Lock()
	defer fake.shardMutex.Unlock()
	fake.ShardStub = nil
	if fake.shardReturnsOnCall == nil {
		fake.shardReturnsOnCall = make(map[int]struct {
			result1 core.ShardID
		})
	}
	fake.shardReturnsOnCall[i] = struct {
		result1 core.ShardID
	}{result1}
}

func (fake *FakeBatchAttestation) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deserializeMutex.RLock()
	defer fake.deserializeMutex.RUnlock()
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	fake.fragmentsMutex.RLock()
	defer fake.fragmentsMutex.RUnlock()
	fake.primaryMutex.RLock()
	defer fake.primaryMutex.RUnlock()
	fake.seqMutex.RLock()
	defer fake.seqMutex.RUnlock()
	fake.serializeMutex.RLock()
	defer fake.serializeMutex.RUnlock()
	fake.shardMutex.RLock()
	defer fake.shardMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBatchAttestation) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.BatchAttestation = new(FakeBatchAttestation)
