// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	arma "arma/core"
	"sync"
)

type FakeBatchPuller struct {
	PullBatchesStub        func(arma.PartyID) <-chan arma.Batch
	pullBatchesMutex       sync.RWMutex
	pullBatchesArgsForCall []struct {
		arg1 arma.PartyID
	}
	pullBatchesReturns struct {
		result1 <-chan arma.Batch
	}
	pullBatchesReturnsOnCall map[int]struct {
		result1 <-chan arma.Batch
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBatchPuller) PullBatches(arg1 arma.PartyID) <-chan arma.Batch {
	fake.pullBatchesMutex.Lock()
	ret, specificReturn := fake.pullBatchesReturnsOnCall[len(fake.pullBatchesArgsForCall)]
	fake.pullBatchesArgsForCall = append(fake.pullBatchesArgsForCall, struct {
		arg1 arma.PartyID
	}{arg1})
	stub := fake.PullBatchesStub
	fakeReturns := fake.pullBatchesReturns
	fake.recordInvocation("PullBatches", []interface{}{arg1})
	fake.pullBatchesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBatchPuller) PullBatchesCallCount() int {
	fake.pullBatchesMutex.RLock()
	defer fake.pullBatchesMutex.RUnlock()
	return len(fake.pullBatchesArgsForCall)
}

func (fake *FakeBatchPuller) PullBatchesCalls(stub func(arma.PartyID) <-chan arma.Batch) {
	fake.pullBatchesMutex.Lock()
	defer fake.pullBatchesMutex.Unlock()
	fake.PullBatchesStub = stub
}

func (fake *FakeBatchPuller) PullBatchesArgsForCall(i int) arma.PartyID {
	fake.pullBatchesMutex.RLock()
	defer fake.pullBatchesMutex.RUnlock()
	argsForCall := fake.pullBatchesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBatchPuller) PullBatchesReturns(result1 <-chan arma.Batch) {
	fake.pullBatchesMutex.Lock()
	defer fake.pullBatchesMutex.Unlock()
	fake.PullBatchesStub = nil
	fake.pullBatchesReturns = struct {
		result1 <-chan arma.Batch
	}{result1}
}

func (fake *FakeBatchPuller) PullBatchesReturnsOnCall(i int, result1 <-chan arma.Batch) {
	fake.pullBatchesMutex.Lock()
	defer fake.pullBatchesMutex.Unlock()
	fake.PullBatchesStub = nil
	if fake.pullBatchesReturnsOnCall == nil {
		fake.pullBatchesReturnsOnCall = make(map[int]struct {
			result1 <-chan arma.Batch
		})
	}
	fake.pullBatchesReturnsOnCall[i] = struct {
		result1 <-chan arma.Batch
	}{result1}
}

func (fake *FakeBatchPuller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pullBatchesMutex.RLock()
	defer fake.pullBatchesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBatchPuller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ arma.BatchPuller = new(FakeBatchPuller)
