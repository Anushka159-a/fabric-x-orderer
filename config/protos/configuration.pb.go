// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.24.4
// source: config/protos/configuration.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SharedConfig holds the initial configuration that will be used to bootstrap new nodes.
// This configuration is common to all Arma nodes.
type SharedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartiesConfig   []*PartyConfig   `protobuf:"bytes,1,rep,name=PartiesConfig,proto3" json:"PartiesConfig,omitempty"`
	ConsensusConfig *ConsensusConfig `protobuf:"bytes,2,opt,name=ConsensusConfig,proto3" json:"ConsensusConfig,omitempty"`
	BatchingConfig  *BatchingConfig  `protobuf:"bytes,3,opt,name=BatchingConfig,proto3" json:"BatchingConfig,omitempty"`
}

func (x *SharedConfig) Reset() {
	*x = SharedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedConfig) ProtoMessage() {}

func (x *SharedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedConfig.ProtoReflect.Descriptor instead.
func (*SharedConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *SharedConfig) GetPartiesConfig() []*PartyConfig {
	if x != nil {
		return x.PartiesConfig
	}
	return nil
}

func (x *SharedConfig) GetConsensusConfig() *ConsensusConfig {
	if x != nil {
		return x.ConsensusConfig
	}
	return nil
}

func (x *SharedConfig) GetBatchingConfig() *BatchingConfig {
	if x != nil {
		return x.BatchingConfig
	}
	return nil
}

// PartyConfig carries the identity, certificates and nodes configuration of a party.
type PartyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identity of the party, type unit16, id > 0
	PartyID uint32 `protobuf:"varint,1,opt,name=PartyID,proto3" json:"PartyID,omitempty"`
	// the certificates of the certificate authorities who generates the party's signing key-pairs
	CACerts [][]byte `protobuf:"bytes,2,rep,name=CACerts,proto3" json:"CACerts,omitempty"`
	// the certificates of the certificate authorities who generates the party's TLS key-pairs
	TLSCACerts [][]byte `protobuf:"bytes,3,rep,name=TLSCACerts,proto3" json:"TLSCACerts,omitempty"`
	// the shared configuration of the router
	RouterConfig *RouterNodeConfig `protobuf:"bytes,4,opt,name=RouterConfig,proto3" json:"RouterConfig,omitempty"`
	// the shared configuration of the batchers
	BatchersConfig []*BatcherNodeConfig `protobuf:"bytes,5,rep,name=BatchersConfig,proto3" json:"BatchersConfig,omitempty"`
	// the shared configuration of the consenter
	ConsenterConfig *ConsenterNodeConfig `protobuf:"bytes,6,opt,name=ConsenterConfig,proto3" json:"ConsenterConfig,omitempty"`
	// the shared configuration of the assembler
	AssemblerConfig *AssemblerNodeConfig `protobuf:"bytes,7,opt,name=AssemblerConfig,proto3" json:"AssemblerConfig,omitempty"`
}

func (x *PartyConfig) Reset() {
	*x = PartyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyConfig) ProtoMessage() {}

func (x *PartyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyConfig.ProtoReflect.Descriptor instead.
func (*PartyConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *PartyConfig) GetPartyID() uint32 {
	if x != nil {
		return x.PartyID
	}
	return 0
}

func (x *PartyConfig) GetCACerts() [][]byte {
	if x != nil {
		return x.CACerts
	}
	return nil
}

func (x *PartyConfig) GetTLSCACerts() [][]byte {
	if x != nil {
		return x.TLSCACerts
	}
	return nil
}

func (x *PartyConfig) GetRouterConfig() *RouterNodeConfig {
	if x != nil {
		return x.RouterConfig
	}
	return nil
}

func (x *PartyConfig) GetBatchersConfig() []*BatcherNodeConfig {
	if x != nil {
		return x.BatchersConfig
	}
	return nil
}

func (x *PartyConfig) GetConsenterConfig() *ConsenterNodeConfig {
	if x != nil {
		return x.ConsenterConfig
	}
	return nil
}

func (x *PartyConfig) GetAssemblerConfig() *AssemblerNodeConfig {
	if x != nil {
		return x.AssemblerConfig
	}
	return nil
}

type RouterNodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the hostname or IP on which the gRPC server will listen
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// the port on which the gRPC server will listen
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// the certificate used to authenticate with clients
	TlsCert []byte `protobuf:"bytes,3,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
}

func (x *RouterNodeConfig) Reset() {
	*x = RouterNodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterNodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterNodeConfig) ProtoMessage() {}

func (x *RouterNodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterNodeConfig.ProtoReflect.Descriptor instead.
func (*RouterNodeConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *RouterNodeConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RouterNodeConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RouterNodeConfig) GetTlsCert() []byte {
	if x != nil {
		return x.TlsCert
	}
	return nil
}

type BatcherNodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the ID of the shard to which the batcher is associated
	ShardID uint32 `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	// the hostname or IP on which the gRPC server will listen
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// the port on which the gRPC server will listen
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// the public key of the batcher used to authenticate signatures on BAS's
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// the certificate used to authenticate with clients
	TlsCert []byte `protobuf:"bytes,5,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
}

func (x *BatcherNodeConfig) Reset() {
	*x = BatcherNodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatcherNodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatcherNodeConfig) ProtoMessage() {}

func (x *BatcherNodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatcherNodeConfig.ProtoReflect.Descriptor instead.
func (*BatcherNodeConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *BatcherNodeConfig) GetShardID() uint32 {
	if x != nil {
		return x.ShardID
	}
	return 0
}

func (x *BatcherNodeConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BatcherNodeConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *BatcherNodeConfig) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *BatcherNodeConfig) GetTlsCert() []byte {
	if x != nil {
		return x.TlsCert
	}
	return nil
}

type ConsenterNodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the hostname or IP on which the gRPC server will listen
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// the port on which the gRPC server will listen
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// the public key of the consensus used to authenticate signatures on blocks
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// the certificate used to authenticate with clients
	TlsCert []byte `protobuf:"bytes,4,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
}

func (x *ConsenterNodeConfig) Reset() {
	*x = ConsenterNodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsenterNodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsenterNodeConfig) ProtoMessage() {}

func (x *ConsenterNodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsenterNodeConfig.ProtoReflect.Descriptor instead.
func (*ConsenterNodeConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *ConsenterNodeConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConsenterNodeConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ConsenterNodeConfig) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ConsenterNodeConfig) GetTlsCert() []byte {
	if x != nil {
		return x.TlsCert
	}
	return nil
}

type AssemblerNodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the hostname or IP on which the gRPC server will listen
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// the port on which the gRPC server will listen
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// the certificate used to authenticate with clients
	TlsCert []byte `protobuf:"bytes,3,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
}

func (x *AssemblerNodeConfig) Reset() {
	*x = AssemblerNodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblerNodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblerNodeConfig) ProtoMessage() {}

func (x *AssemblerNodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblerNodeConfig.ProtoReflect.Descriptor instead.
func (*AssemblerNodeConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *AssemblerNodeConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AssemblerNodeConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AssemblerNodeConfig) GetTlsCert() []byte {
	if x != nil {
		return x.TlsCert
	}
	return nil
}

// BFT configuration
type ConsensusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmartBFTConfig *SmartBFTConfig `protobuf:"bytes,1,opt,name=SmartBFTConfig,proto3" json:"SmartBFTConfig,omitempty"`
}

func (x *ConsensusConfig) Reset() {
	*x = ConsensusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusConfig) ProtoMessage() {}

func (x *ConsensusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusConfig.ProtoReflect.Descriptor instead.
func (*ConsensusConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *ConsensusConfig) GetSmartBFTConfig() *SmartBFTConfig {
	if x != nil {
		return x.SmartBFTConfig
	}
	return nil
}

type SmartBFTConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestBatchMaxInterval is the maximal time interval a request batch can wait before it is proposed. A request batch is accumulating requests until `RequestBatchMaxInterval` had elapsed from the time the batch was first created (i.e. the time the first request was added to it), or until it is of count `RequestBatchMaxCount`, or it reaches `RequestBatchMaxBytes`, whichever occurs first.
	RequestBatchMaxInterval uint32 `protobuf:"varint,1,opt,name=RequestBatchMaxInterval,proto3" json:"RequestBatchMaxInterval,omitempty"`
	// RequestForwardTimeout is started from the moment a request is submitted, and defines the interval after which a request is forwarded to the leader.
	RequestForwardTimeout uint32 `protobuf:"varint,2,opt,name=RequestForwardTimeout,proto3" json:"RequestForwardTimeout,omitempty"`
	// RequestComplainTimeout is started when `RequestForwardTimeout` expires, and defines the interval after which the node complains about the view leader.
	RequestComplainTimeout uint32 `protobuf:"varint,3,opt,name=RequestComplainTimeout,proto3" json:"RequestComplainTimeout,omitempty"`
	// RequestAutoRemoveTimeout is started when `RequestComplainTimeout` expires, and defines the interval after which a request is removed (dropped) from the request pool.
	RequestAutoRemoveTimeout uint32 `protobuf:"varint,4,opt,name=RequestAutoRemoveTimeout,proto3" json:"RequestAutoRemoveTimeout,omitempty"`
	// ViewChangeResendInterval defines the interval after which the ViewChange message is resent.
	ViewChangeResendInterval uint32 `protobuf:"varint,5,opt,name=ViewChangeResendInterval,proto3" json:"ViewChangeResendInterval,omitempty"`
	// ViewChangeTimeout is started when a node first receives a quorum of `ViewChange` messages, and defines the interval after which the node will try to initiate a view change with a higher view number.
	ViewChangeTimeout uint32 `protobuf:"varint,6,opt,name=ViewChangeTimeout,proto3" json:"ViewChangeTimeout,omitempty"`
	// LeaderHeartbeatTimeout is the interval after which, if nodes do not receive a "sign of life" from the leader, they complain about the current leader and try to initiate a view change. A sign of life is either a heartbeat or a message from the leader.
	LeaderHeartbeatTimeout uint32 `protobuf:"varint,7,opt,name=LeaderHeartbeatTimeout,proto3" json:"LeaderHeartbeatTimeout,omitempty"`
	// CollectTimeout is the interval after which the node stops listening to `StateTransferResponse` messages, stops collecting information about view metadata from remote nodes.
	CollectTimeout uint32 `protobuf:"varint,8,opt,name=CollectTimeout,proto3" json:"CollectTimeout,omitempty"`
	// IncomingMessageBufferSize is the size of the buffer holding incoming messages before they are processed (maximal number of messages).
	IncomingMessageBufferSize uint32 `protobuf:"varint,9,opt,name=IncomingMessageBufferSize,proto3" json:"IncomingMessageBufferSize,omitempty"`
	// RequestPoolSize is the number of pending requests retained by the node. The `RequestPoolSize` is recommended to be at least double (x2) the `RequestBatchMaxCount`. This cannot be changed dynamically and the node must be restarted to pick up the change.
	RequestPoolSize uint32 `protobuf:"varint,10,opt,name=RequestPoolSize,proto3" json:"RequestPoolSize,omitempty"`
	// LeaderHeartbeatCount is the number of heartbeats per `LeaderHeartbeatTimeout` that the leader should emit. The heartbeat-interval is equal to: `LeaderHeartbeatTimeout/LeaderHeartbeatCount`.
	LeaderHeartbeatCount uint32 `protobuf:"varint,11,opt,name=LeaderHeartbeatCount,proto3" json:"LeaderHeartbeatCount,omitempty"`
}

func (x *SmartBFTConfig) Reset() {
	*x = SmartBFTConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartBFTConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartBFTConfig) ProtoMessage() {}

func (x *SmartBFTConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartBFTConfig.ProtoReflect.Descriptor instead.
func (*SmartBFTConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{7}
}

func (x *SmartBFTConfig) GetRequestBatchMaxInterval() uint32 {
	if x != nil {
		return x.RequestBatchMaxInterval
	}
	return 0
}

func (x *SmartBFTConfig) GetRequestForwardTimeout() uint32 {
	if x != nil {
		return x.RequestForwardTimeout
	}
	return 0
}

func (x *SmartBFTConfig) GetRequestComplainTimeout() uint32 {
	if x != nil {
		return x.RequestComplainTimeout
	}
	return 0
}

func (x *SmartBFTConfig) GetRequestAutoRemoveTimeout() uint32 {
	if x != nil {
		return x.RequestAutoRemoveTimeout
	}
	return 0
}

func (x *SmartBFTConfig) GetViewChangeResendInterval() uint32 {
	if x != nil {
		return x.ViewChangeResendInterval
	}
	return 0
}

func (x *SmartBFTConfig) GetViewChangeTimeout() uint32 {
	if x != nil {
		return x.ViewChangeTimeout
	}
	return 0
}

func (x *SmartBFTConfig) GetLeaderHeartbeatTimeout() uint32 {
	if x != nil {
		return x.LeaderHeartbeatTimeout
	}
	return 0
}

func (x *SmartBFTConfig) GetCollectTimeout() uint32 {
	if x != nil {
		return x.CollectTimeout
	}
	return 0
}

func (x *SmartBFTConfig) GetIncomingMessageBufferSize() uint32 {
	if x != nil {
		return x.IncomingMessageBufferSize
	}
	return 0
}

func (x *SmartBFTConfig) GetRequestPoolSize() uint32 {
	if x != nil {
		return x.RequestPoolSize
	}
	return 0
}

func (x *SmartBFTConfig) GetLeaderHeartbeatCount() uint32 {
	if x != nil {
		return x.LeaderHeartbeatCount
	}
	return 0
}

type BatchingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BatchTimeout is the amount of time to wait before creating a batch.
	BatchTimeout uint32 `protobuf:"varint,1,opt,name=BatchTimeout,proto3" json:"BatchTimeout,omitempty"`
	// BatchSize controls the number of messages batched into a block and defines limits on a batch size.
	BatchSize *BatchSize `protobuf:"bytes,2,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
}

func (x *BatchingConfig) Reset() {
	*x = BatchingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchingConfig) ProtoMessage() {}

func (x *BatchingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchingConfig.ProtoReflect.Descriptor instead.
func (*BatchingConfig) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{8}
}

func (x *BatchingConfig) GetBatchTimeout() uint32 {
	if x != nil {
		return x.BatchTimeout
	}
	return 0
}

func (x *BatchingConfig) GetBatchSize() *BatchSize {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

type BatchSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MaxMessageCount is the maximum number of messages to permit in a batch. No block will contain more than this number of messages.
	MaxMessageCount uint32 `protobuf:"varint,1,opt,name=MaxMessageCount,proto3" json:"MaxMessageCount,omitempty"`
	// AbsoluteMaxBytes is the absolute maximum number of bytes allowed for the serialized messages in a batch.
	// The maximum block size is this value plus the size of the associated metadata (usually a few KB depending upon the size of the signing identities).
	// Any transaction larger than this value will be rejected by ordering.
	// It is recommended not to exceed 49 MB, given the default grpc max message size of 100 MB
	AbsoluteMaxBytes uint32 `protobuf:"varint,2,opt,name=AbsoluteMaxBytes,proto3" json:"AbsoluteMaxBytes,omitempty"`
	// PreferredMaxBytes is the preferred maximum number of bytes allowed for the serialized messages in a batch.
	// Roughly, this field may be considered the best effort maximum size of a batch.
	// A batch will fill with messages until this size is reached (or the max message count, or batch timeout is exceeded).
	// If adding a new message to the batch would cause the batch to exceed the preferred max bytes, then the current batch is closed and written to a block, and a new batch containing the new message is created.
	// If a message larger than the preferred max bytes is received, then its batch will contain only that message.
	// Because messages may be larger than preferred max bytes (up to AbsoluteMaxBytes), some batches may exceed the preferred max bytes, but will always contain exactly one transaction.
	PreferredMaxBytes uint32 `protobuf:"varint,3,opt,name=PreferredMaxBytes,proto3" json:"PreferredMaxBytes,omitempty"`
}

func (x *BatchSize) Reset() {
	*x = BatchSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_protos_configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSize) ProtoMessage() {}

func (x *BatchSize) ProtoReflect() protoreflect.Message {
	mi := &file_config_protos_configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSize.ProtoReflect.Descriptor instead.
func (*BatchSize) Descriptor() ([]byte, []int) {
	return file_config_protos_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *BatchSize) GetMaxMessageCount() uint32 {
	if x != nil {
		return x.MaxMessageCount
	}
	return 0
}

func (x *BatchSize) GetAbsoluteMaxBytes() uint32 {
	if x != nil {
		return x.AbsoluteMaxBytes
	}
	return 0
}

func (x *BatchSize) GetPreferredMaxBytes() uint32 {
	if x != nil {
		return x.PreferredMaxBytes
	}
	return 0
}

var File_config_protos_configuration_proto protoreflect.FileDescriptor

var file_config_protos_configuration_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd4, 0x02,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x41, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x4c, 0x53, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x54, 0x4c, 0x53, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x35, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x55, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x11,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x22, 0x77, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x22, 0x58, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74,
	0x22, 0x4a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x0e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x42, 0x46, 0x54, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x42, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x42, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xda, 0x04, 0x0a,
	0x0e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x42, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x38, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61,
	0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x36, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a,
	0x19, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x0e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x28, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x09,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x14, 0x5a, 0x12, 0x61,
	0x72, 0x6d, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_protos_configuration_proto_rawDescOnce sync.Once
	file_config_protos_configuration_proto_rawDescData = file_config_protos_configuration_proto_rawDesc
)

func file_config_protos_configuration_proto_rawDescGZIP() []byte {
	file_config_protos_configuration_proto_rawDescOnce.Do(func() {
		file_config_protos_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_protos_configuration_proto_rawDescData)
	})
	return file_config_protos_configuration_proto_rawDescData
}

var file_config_protos_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_config_protos_configuration_proto_goTypes = []interface{}{
	(*SharedConfig)(nil),        // 0: SharedConfig
	(*PartyConfig)(nil),         // 1: PartyConfig
	(*RouterNodeConfig)(nil),    // 2: RouterNodeConfig
	(*BatcherNodeConfig)(nil),   // 3: BatcherNodeConfig
	(*ConsenterNodeConfig)(nil), // 4: ConsenterNodeConfig
	(*AssemblerNodeConfig)(nil), // 5: AssemblerNodeConfig
	(*ConsensusConfig)(nil),     // 6: ConsensusConfig
	(*SmartBFTConfig)(nil),      // 7: SmartBFTConfig
	(*BatchingConfig)(nil),      // 8: BatchingConfig
	(*BatchSize)(nil),           // 9: BatchSize
}
var file_config_protos_configuration_proto_depIdxs = []int32{
	1, // 0: SharedConfig.PartiesConfig:type_name -> PartyConfig
	6, // 1: SharedConfig.ConsensusConfig:type_name -> ConsensusConfig
	8, // 2: SharedConfig.BatchingConfig:type_name -> BatchingConfig
	2, // 3: PartyConfig.RouterConfig:type_name -> RouterNodeConfig
	3, // 4: PartyConfig.BatchersConfig:type_name -> BatcherNodeConfig
	4, // 5: PartyConfig.ConsenterConfig:type_name -> ConsenterNodeConfig
	5, // 6: PartyConfig.AssemblerConfig:type_name -> AssemblerNodeConfig
	7, // 7: ConsensusConfig.SmartBFTConfig:type_name -> SmartBFTConfig
	9, // 8: BatchingConfig.BatchSize:type_name -> BatchSize
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_config_protos_configuration_proto_init() }
func file_config_protos_configuration_proto_init() {
	if File_config_protos_configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_protos_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterNodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatcherNodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsenterNodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblerNodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartBFTConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_protos_configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_protos_configuration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_protos_configuration_proto_goTypes,
		DependencyIndexes: file_config_protos_configuration_proto_depIdxs,
		MessageInfos:      file_config_protos_configuration_proto_msgTypes,
	}.Build()
	File_config_protos_configuration_proto = out.File
	file_config_protos_configuration_proto_rawDesc = nil
	file_config_protos_configuration_proto_goTypes = nil
	file_config_protos_configuration_proto_depIdxs = nil
}
