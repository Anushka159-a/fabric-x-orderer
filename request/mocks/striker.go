// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.ibm.com/decentralized-trust-research/arma/request"
)

type FakeStriker struct {
	OnFirstStrikeTimeoutStub        func([]byte)
	onFirstStrikeTimeoutMutex       sync.RWMutex
	onFirstStrikeTimeoutArgsForCall []struct {
		arg1 []byte
	}
	OnSecondStrikeTimeoutStub        func()
	onSecondStrikeTimeoutMutex       sync.RWMutex
	onSecondStrikeTimeoutArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStriker) OnFirstStrikeTimeout(arg1 []byte) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.onFirstStrikeTimeoutMutex.Lock()
	fake.onFirstStrikeTimeoutArgsForCall = append(fake.onFirstStrikeTimeoutArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.OnFirstStrikeTimeoutStub
	fake.recordInvocation("OnFirstStrikeTimeout", []interface{}{arg1Copy})
	fake.onFirstStrikeTimeoutMutex.Unlock()
	if stub != nil {
		fake.OnFirstStrikeTimeoutStub(arg1)
	}
}

func (fake *FakeStriker) OnFirstStrikeTimeoutCallCount() int {
	fake.onFirstStrikeTimeoutMutex.RLock()
	defer fake.onFirstStrikeTimeoutMutex.RUnlock()
	return len(fake.onFirstStrikeTimeoutArgsForCall)
}

func (fake *FakeStriker) OnFirstStrikeTimeoutCalls(stub func([]byte)) {
	fake.onFirstStrikeTimeoutMutex.Lock()
	defer fake.onFirstStrikeTimeoutMutex.Unlock()
	fake.OnFirstStrikeTimeoutStub = stub
}

func (fake *FakeStriker) OnFirstStrikeTimeoutArgsForCall(i int) []byte {
	fake.onFirstStrikeTimeoutMutex.RLock()
	defer fake.onFirstStrikeTimeoutMutex.RUnlock()
	argsForCall := fake.onFirstStrikeTimeoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStriker) OnSecondStrikeTimeout() {
	fake.onSecondStrikeTimeoutMutex.Lock()
	fake.onSecondStrikeTimeoutArgsForCall = append(fake.onSecondStrikeTimeoutArgsForCall, struct {
	}{})
	stub := fake.OnSecondStrikeTimeoutStub
	fake.recordInvocation("OnSecondStrikeTimeout", []interface{}{})
	fake.onSecondStrikeTimeoutMutex.Unlock()
	if stub != nil {
		fake.OnSecondStrikeTimeoutStub()
	}
}

func (fake *FakeStriker) OnSecondStrikeTimeoutCallCount() int {
	fake.onSecondStrikeTimeoutMutex.RLock()
	defer fake.onSecondStrikeTimeoutMutex.RUnlock()
	return len(fake.onSecondStrikeTimeoutArgsForCall)
}

func (fake *FakeStriker) OnSecondStrikeTimeoutCalls(stub func()) {
	fake.onSecondStrikeTimeoutMutex.Lock()
	defer fake.onSecondStrikeTimeoutMutex.Unlock()
	fake.OnSecondStrikeTimeoutStub = stub
}

func (fake *FakeStriker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onFirstStrikeTimeoutMutex.RLock()
	defer fake.onFirstStrikeTimeoutMutex.RUnlock()
	fake.onSecondStrikeTimeoutMutex.RLock()
	defer fake.onSecondStrikeTimeoutMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStriker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ request.Striker = new(FakeStriker)
